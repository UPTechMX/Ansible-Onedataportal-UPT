---
- name: Backup `oskari-ext.properties` Oskari settings file if backup file `oskari-ext.properties.orig` does not exist
  shell: "cp {{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties {{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties.orig"
  args:
    creates: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties.orig"

- name: "Enable custom user service `org.oskari.example.util.DatabaseUserServiceCKAN` bundle in `oskari.user.service` in Oskari settings"
  lineinfile:
    dest: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    regexp: 'oskari\.user\.service(.*)$'
    line: "oskari.user.service=org.oskari.example.util.DatabaseUserServiceCKAN"
    state: present

- name: "Add example module to the oskari-ext.properties"
  lineinfile:
    dest: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    regexp: 'db\.additional\.modules(.*)$'
    line: "db.additional.modules=myplaces, userlayer, wbidp, example"
    state: present

- name: "Add autorepair"
  lineinfile:
    dest: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    insertafter: '^#db\.flyway\.autorepair.*$'
    line: "db.flyway.autorepair=true"
    state: present

- name: "Add ignoreMigrationFailures"
  lineinfile:
    dest: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    insertafter: '^#db\.ignoreMigrationFailures.*$'
    line: "db.ignoreMigrationFailures=true"
    state: present

- name: "Add extra settings for the UrbanPerformance and Distance evaluation modules for UPT"
  blockinfile:
    path: "{{ install_dir_oskari }}/oskari-server/resources/oskari-ext.properties"
    insertafter: EOF
    marker: "# {mark} UPT Ansible Managed Block #"
    block: |

      ##################################
      # UPT Modules Settings
      ##################################
      up.db.URL=jdbc:postgresql://localhost:5432/oskaridb
      up.db.password=oskari
      up.db.user=oskari

      upws.db.host={{ upt_modules.up_backend_host }}
      upws.db.port={{ upt_modules.up_backend_port }}
      stws.db.host={{ upt_modules.distance_backend_host }}
      stws.db.port={{ upt_modules.distance_backend_port }}

- name: Cloning UPT-GUI repository
  git:
    #repo: https://{{ gituser | urlencode }}:{{ gitpassword | urlencode }}@github.com/miguel-capsus/UPT-UrbanPerformance.git
    repo: https://github.com/UPTechMX/UPT-GUI.git
    dest: "{{ install_dir_oskari }}/oskari-server/UPT-GUI"
    clone: yes

- name: Cloning UPT-Server-Extension repository
  git:
    #repo: https://{{ gituser | urlencode }}:{{ gitpassword | urlencode }}@github.com/miguel-capsus/UPT-Distance-Module.git
    repo: https://github.com/UPTechMX/UPT-Server-Extension.git
    dest: "{{ install_dir_oskari }}/oskari-server/UPT-Server-Extension"
    clone: yes

- name: Run npm install for UPT-GUI dependencies
  shell: |
    cd {{ install_dir_oskari }}/oskari-server/UPT-GUI
    git checkout idp-geoportal
    npm install
    exit

- name: Building the UPT-GUI for SatuDataportal
  shell: |
    cd {{ install_dir_oskari }}/oskari-server/UPT-GUI
    ng build --prod --output-hashing none
    exit

- name: Copy build artifacts to oskari-frontend
  shell: |
    cp -r {{ install_dir_oskari }}/oskari-server/UPT-GUI/dist/PLID {{ install_dir_oskari }}/oskari-server/oskari-application/dist/wbidp/geoportal

- name: Checkout UPT-Server-Extension for SatuDataportal
  shell: |
    cd {{ install_dir_oskari }}/oskari-server/UPT-Server-Extension
    git checkout migration-tests
    exit

- name: Build oskari-map.war file
  shell: |
    cd {{ install_dir_oskari }}/oskari-server/UPT-Server-Extension
    mvn clean install

- name: Copy oskari-map.war to webapps of oskari-server directory
  shell: |
    cp {{ install_dir_oskari }}/oskari-server/UPT-Server-Extension/webapp-map/target/oskari-map.war {{ install_dir_oskari }}/oskari-server/webapps

- name: Run UPT-Server-Extension SQL scripts
  become_user: postgres
  become_method: sudo
  environment:
    PGPASSWORD: "{{ oskari_db_pw }}"
  shell: |
    psql -h localhost -U oskari -f {{ install_dir_oskari }}/oskari-server/UPT-Server-Extension/app-resources/src/main/resources/flyway/example/run-upt-scripts.sql -d oskaridb
